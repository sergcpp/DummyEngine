#include "test_common.h"

#include "membuf.h"

#include "../Context.h"
#include "../Mesh.h"
#include "../Utils.h"

namespace {
[[maybe_unused]] static const unsigned char __ivy_mesh[] = {
    0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x4d, 0x45, 0x53, 0x48, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
    0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x4d,
    0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00, 0xc3, 0x3c, 0x04, 0x77, 0x16, 0x50, 0x17, 0x76,
    0x00, 0x00, 0x00, 0x00, 0x24, 0x38, 0x28, 0x01, 0x00, 0x00, 0x28, 0x01, 0xe0, 0x3c, 0x26, 0xc1, 0x99, 0x9b, 0x5c,
    0xc3, 0x32, 0xda, 0xdc, 0xc3, 0x8c, 0xb5, 0xa6, 0x42, 0xc8, 0xd0, 0x33, 0x43, 0x32, 0xda, 0xdc, 0x43, 0x00, 0x00,
    0x00, 0x00, 0xd4, 0x87, 0x22, 0x43, 0x32, 0xda, 0xdc, 0xc3, 0x82, 0xdb, 0x40, 0xbf, 0x50, 0xf7, 0x27, 0x3f, 0x69,
    0x81, 0x34, 0x3d, 0xd8, 0xe8, 0xcd, 0x38, 0x8d, 0x48, 0x5c, 0x3f, 0x00, 0x00, 0x00, 0x35, 0xad, 0x62, 0xce, 0x42,
    0x32, 0xda, 0xdc, 0x43, 0x8e, 0x3d, 0x47, 0xbf, 0x41, 0x65, 0x20, 0x3f, 0x50, 0x01, 0x28, 0x3d, 0x4c, 0xce, 0x7f,
    0x3f, 0x4e, 0x87, 0x5f, 0x3f, 0x8c, 0xb5, 0xa6, 0x42, 0x94, 0xf4, 0xf0, 0x42, 0x32, 0xda, 0xdc, 0x43, 0x9f, 0x71,
    0x4f, 0xbe, 0xf4, 0x1f, 0x7a, 0x3f, 0x0d, 0x61, 0x86, 0x3d, 0x54, 0xf9, 0x7f, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0xe0,
    0x3c, 0x26, 0xc1, 0x99, 0x9b, 0x5c, 0xc3, 0x32, 0xda, 0xdc, 0xc3, 0x00, 0xe4, 0x7f, 0xbf, 0xce, 0x01, 0xe7, 0x3c,
    0x70, 0x01, 0xb8, 0x3a, 0xf1, 0x9d, 0x06, 0x3c, 0xd8, 0xe8, 0xcd, 0x38, 0xe0, 0x3c, 0x26, 0xc1, 0x99, 0x9b, 0x5c,
    0xc3, 0x32, 0xda, 0xdc, 0x43, 0x00, 0xde, 0x7f, 0xbf, 0x06, 0x41, 0x03, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x91, 0xf9,
    0x7f, 0x3f, 0xe6, 0xe1, 0x1a, 0x3c, 0x8c, 0xb5, 0xa6, 0x42, 0xc8, 0xd0, 0x33, 0x43, 0x32, 0xda, 0xdc, 0xc3, 0x9f,
    0x71, 0x4f, 0xbe, 0xf4, 0x1f, 0x7a, 0x3f, 0x0d, 0x61, 0x86, 0x3d, 0x71, 0xea, 0xe3, 0x3b, 0x00, 0x00, 0x80, 0x3f,
    0x04, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05,
    0x00, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x69, 0x76, 0x79, 0x5f, 0x30, 0x31, 0x2e, 0x74, 0x67,
    0x61, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x28, 0x01, 0x68, 0xef, 0x83, 0x02, 0x7f, 0x07, 0x00, 0x00, 0x68,
    0xef, 0x83, 0x02, 0x08, 0x2b, 0x28, 0x01, 0x7f, 0x0d, 0x00, 0x00, 0x00, 0xe4, 0x28, 0x00, 0xc8, 0x8b, 0x04, 0x77,
    0x00, 0x00, 0x28, 0x01, 0xe8, 0x93, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00};
[[maybe_unused]] static const unsigned int __ivy_mesh_len = 400;

[[maybe_unused]] static const unsigned char __skeletal_mesh[] = {
    0x53, 0x4b, 0x45, 0x4c, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x48, 0x00, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x38, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x16, 0x00,
    0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a,
    0x02, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0xbb, 0xd5,
    0xfc, 0x7f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xc0, 0x0a, 0xd7, 0x23, 0x3c, 0x00, 0x00,
    0xa0, 0x41, 0xeb, 0x51, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x40, 0x00,
    0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3e, 0x23, 0x45, 0x94, 0x38,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x41, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x41, 0xff, 0xff, 0x9f, 0xc0, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x45, 0x94, 0x38, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x41, 0xff, 0xff, 0x9f,
    0x40, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3e, 0x5d, 0xfb,
    0x7f, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xa0, 0x41, 0xff, 0xff, 0x9f, 0xc0, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x23, 0x45, 0x94, 0x38, 0x5d, 0xfb, 0x7f, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xc0, 0x00, 0x00, 0x80, 0xbf,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x45, 0x94, 0x38, 0x94, 0x56, 0x94, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x73, 0x2f, 0x6d, 0x61, 0x74, 0x2e, 0x74, 0x67, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65, 0x30, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f, 0x42,
    0x6f, 0x6e, 0x65, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x20, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f,
    0xf4, 0x04, 0x35, 0x3f};
[[maybe_unused]] static const unsigned int __skeletal_mesh_len = 802;
} // namespace

void test_mesh() {
    using namespace Ren;

    printf("Test mesh               | ");

    { // Load simple mesh
        membuf sbuf(__ivy_mesh, sizeof(__ivy_mesh));
        std::istream in(&sbuf);

        TestContext test;

        auto on_pipelines_needed = [](const uint32_t flags, std::string_view arg1, std::string_view arg2,
                                      std::string_view arg3, std::string_view arg4,
                                      SmallVectorImpl<PipelineRef> &out_pipelines) {};

        auto on_texture_needed = [&test](std::string_view name, const uint8_t color[4],
                                         const Bitmask<eTexFlags> flags) {
            eTexLoadStatus status;
            TexParams p;
            return test.LoadTexture(name, {}, p, nullptr, &status);
        };

        auto on_sampler_needed = [&test](SamplingParams params) {
            eSamplerLoadStatus status;
            return test.LoadSampler(params, &status);
        };

        auto on_material_needed = [&](std::string_view name) {
            eMatLoadStatus status;
            MaterialRef ret =
                test.LoadMaterial(name, {}, &status, on_pipelines_needed, on_texture_needed, on_sampler_needed);
            return std::array<MaterialRef, 3>{ret, ret, {}};
        };

        eMeshLoadStatus load_status;
        MeshRef m_ref = test.LoadMesh("ivy", &in, on_material_needed, &load_status);
        require(load_status == eMeshLoadStatus::CreatedFromData);
        require(m_ref->type() == eMeshType::Simple);
        require(m_ref->name() == "ivy");

        require(m_ref->bbox_min() == Vec3f(-10.389862f, -220.607803f, -441.704651f));
        require(m_ref->bbox_max() == Vec3f(83.354584f, 179.815552f, 441.704651f));

        require(m_ref->groups().size() == 1);

        require(!m_ref->attribs().empty());
        // 16 bytes per vertex in each buffer
        require(m_ref->attribs_buf1().size == 48);
        require(m_ref->attribs_buf2().size == 48);
        require(!m_ref->indices().empty());
        require(m_ref->indices_buf().size == 20);

        require(m_ref->flags() == eMeshFlags::HasAlpha);
        require(m_ref->groups()[0].flags == eMeshFlags::HasAlpha);

        {
            MeshRef m_ref2 = test.LoadMesh("ivy", &in, on_material_needed, &load_status);
            require(load_status == eMeshLoadStatus::Found);
            require(bool(m_ref2));
        }

        MaterialRef mat_ref = m_ref->groups()[0].front_mat;
        require(!mat_ref->ready());
    }

    /*{
        // Load skeletal mesh
        membuf sbuf(__skeletal_mesh, sizeof(__skeletal_mesh));
        std::istream in(&sbuf);

        TestContext test;

        auto on_pipelines_needed = [&test](const uint32_t flags, std::string_view arg1, std::string_view arg2,
                                           std::string_view arg3, std::string_view arg4,
                                           SmallVectorImpl<PipelineRef> &out_pipelines) {
#if defined(REN_GL_BACKEND)

#elif defined(REN_SW_BACKEND)
            Attribute _attrs[] = {{}};
            Uniform _unifs[] = {{}};
            return test.LoadProgramSW(name, nullptr, nullptr, 0, _attrs, _unifs, &status);
#endif
        };

        auto on_texture_needed = [&test](std::string_view name, const uint8_t color[4], const eTexFlags flags) {
            eTexLoadStatus status;
            TexParams p;
            return test.LoadTexture2D(name, {}, p, nullptr, &status);
        };

        auto on_sampler_needed = [&test](SamplingParams params) {
            eSamplerLoadStatus status;
            return test.LoadSampler(params, &status);
        };

        auto on_material_needed = [&](std::string_view name) {
            eMatLoadStatus status;
            MaterialRef ret =
                test.LoadMaterial(name, {}, &status, on_pipelines_needed, on_texture_needed, on_sampler_needed);
            return std::pair{ret, ret};
        };

        eMeshLoadStatus load_status;
        MeshRef m_ref = test.LoadMesh("test", &in, on_material_needed, &load_status);
        require(load_status == eMeshLoadStatus::CreatedFromData);
        require(bool(m_ref));
        require(m_ref->type() == eMeshType::Skeletal);
        require(m_ref->name() == "test");

        require(m_ref->bbox_min()[0] == Approx(0).epsilon(0.01));
        require(m_ref->bbox_min()[1] == Approx(0).epsilon(0.01));
        require(m_ref->bbox_min()[2] == Approx(-5).epsilon(0.01));
        require(m_ref->bbox_max()[0] == Approx(0).epsilon(0.01));
        require(m_ref->bbox_max()[1] == Approx(20).epsilon(0.01));
        require(m_ref->bbox_max()[2] == Approx(5).epsilon(0.01));

        require(m_ref->groups().size() == 1);

        require(!m_ref->attribs().empty());
        // attribs have 48 bytes per vertex
        require(m_ref->sk_attribs_buf().size == 48 * 4);
        require(!m_ref->indices().empty());
        require(m_ref->indices_buf().size == 22);

        require(m_ref->flags() == 0);
        require(m_ref->groups()[0].flags == 0);

        require(m_ref->skel()->bones.size() == 2);
        require(std::string(m_ref->skel()->bones[0].name) == "Bone01");
        require(m_ref->skel()->bones[0].id == 0);
        require(m_ref->skel()->bones[0].parent_id == -1);
        require(m_ref->skel()->bones[0].dirty == 1);

        require(std::string(m_ref->skel()->bones[1].name) == "Bone02");
        require(m_ref->skel()->bones[1].id == 1);
        require(m_ref->skel()->bones[1].parent_id == 0);
        require(m_ref->skel()->bones[1].dirty == 1);

        {
            eMeshLoadStatus load_status;
            MeshRef m_ref2 = test.LoadMesh("test", &in, on_material_needed, &load_status);
            require(load_status == eMeshLoadStatus::Found);
            require(bool(m_ref2));
        }

        MaterialRef mat_ref = m_ref->groups()[0].front_mat;
        require(bool(mat_ref));
        require(!mat_ref->ready());
    }*/

    printf("OK\n");
}
